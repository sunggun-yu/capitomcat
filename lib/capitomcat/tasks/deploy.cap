require 'capistrano'
require 'aws-sdk'
require 'sshkit/backends/netssh'
require_relative '../aws_elb_manager'

# Author:: Sunggun Yu

# Capistrano 3 Recipe for Tomcat web application deployment.'
namespace :capitomcat do
  desc <<-DESC
    Capitomcat Recipe for Tomcat web application deployment.

    Required Configurations

    set :use_sudo, true
    role :app, %w{deploy@dev01 deploy@dev02}

    # Remote Tomcat server setting section
    set   :tomcat_user, 'tomcat7'
    set   :tomcat_user_group, 'tomcat7'
    set   :tomcat_port, '8080'
    set   :tomcat_cmd, '/etc/init.d/tomcat7'
    set   :use_tomcat_user_cmd, false
    set   :tomcat_war_file, '/var/app/war/test-web.war'
    set   :tomcat_context_path, '/test-web'
    set   :tomcat_context_file, '/var/lib/tomcat7/conf/Catalina/localhost/test-web.xml'
    set   :tomcat_work_dir, '/var/lib/tomcat7/work/Catalina/localhost/test-web'
    set   :tomcat_cmd_wait_start, 10 # Second
    set   :tomcat_cmd_wait_stop, 5 # Second
    set   :use_background_tomcat_cmd, false # Use normal execute command as default

    # Deploy setting section
    set   :local_war_file, '/tmp/test-web.war'
    set   :context_template_file, File.expand_path('../templates/context.xml.erb', __FILE__).to_s
    set   :use_parallel, true
    set   :use_context_update, true
  DESC

  task :deploy do
    set :elb_instance_registration_wait_seconds, 300

    if elb_defined?
      aws_elb_manager = Capitomcat::AwsElbManager.new(
        access_key_id: fetch(:aws_access_key_id),
        region: fetch(:aws_region),
        secret_access_key: fetch(:aws_secret_access_key),
        load_balancer_name: fetch(:load_balancer_name)
      )
    end

    on roles(:app), in: get_parallelism, wait: 5 do |hosts|
      if elb_defined?
        deregister_instance(hosts.properties.fetch(:instance_id), aws_elb_manager)
      end

      local_war_file = fetch(:local_war_file)
      tomcat_war_file = fetch(:tomcat_war_file)

      if local_war_file.is_a?(Array) and tomcat_war_file.is_a?(Array)
        raise("Local and Remote files must match") if local_war_file.length != tomcat_war_file.length

        local_war_file.each_with_index do |local_file, index|
          deploy_war(local_file, tomcat_war_file[index])
        end
      elsif local_war_file.is_a?(String) and fetch(:tomcat_war_file).is_a?(String)
        deploy_war(local_war_file, tomcat_war_file)
      else
        raise("War inputs are mismatched")
      end

      info 'Start Tomcat'
      start_tomcat
      check_tomcat_started

      if elb_defined?
        register_instance(hosts.properties.fetch(:instance_id), aws_elb_manager)
      end
    end
  end

  def deploy_war(local_war_file, tomcat_war_file)
    if fetch(:use_context_update) then
      info 'Upload WAR file'
      upload_war_file(local_war_file, tomcat_war_file)

      info 'Stop Tomcat'
      stop_tomcat
      check_tomcat_stopped

      info 'Update Context'
      upload_context_file

      info 'Clean Work directory'
      cleanup_work_dir

      info 'Clean Unpacked WAR directory'
      cleanup_unpacked_dir(tomcat_war_file)
    else
      info 'Stop Tomcat'
      stop_tomcat
      check_tomcat_stopped

      info 'Clean Unpacked WAR directory'
      cleanup_unpacked_dir(tomcat_war_file)

      info 'Upload WAR file'
      upload_war_file(local_war_file, tomcat_war_file)

      info 'Clean Work directory'
      cleanup_work_dir
    end
  end

  # Start Tomcat server
  def start_tomcat
    execute_tomcat_cmd('start')
  end

  # Check status whether Tomcat started
  def check_tomcat_started
    tomcat_cmd_wait_start = if fetch(:tomcat_cmd_wait_start).to_s.length > 0
                              fetch(:tomcat_cmd_wait_start).to_i
                            else
                              30 # Default is 30 sec
                            end
    _times = 0
    until check_tomcat_responding do
      if _times >= tomcat_cmd_wait_start
        raise 'Tomcat is not started.'
      end
      _times += 1
      info("Check and wait until starting Tomcat ... #{_times}")
      sleep(1)
    end
  end

  # Check status whether Tomcat stopped
  def check_tomcat_stopped
    tomcat_cmd_wait_stop = if fetch(:tomcat_cmd_wait_stop).to_s.length > 0
                              fetch(:tomcat_cmd_wait_stop).to_i
                            else
                              5 # Default is 5 sec
                            end
    _times = 0
    until !check_tomcat_responding do
      if _times >= tomcat_cmd_wait_stop
        raise 'Tomcat is not stopped.'
      end
      _times += 1
      info("Check and wait until Tomcat stopping ... #{_times}")
      sleep(1)
    end
  end

  def check_tomcat_responding
    test("curl -I 'http://127.0.0.1:#{tomcat_port}'")
  end

  # Stop Tomcat server
  def stop_tomcat
    execute_tomcat_cmd('stop')
  end

  # Upload the WAR file
  def upload_war_file(local_war_file, tomcat_war_file)
    upload_user = fetch(:user)
    tomcat_user = fetch(:tomcat_user)

    if File.exists?(local_war_file)
      # Setup file name
      temp_dir = Pathname.new('/tmp')
      temp_file = File.basename(tomcat_war_file)
      tmp_war_file = temp_dir.join(temp_file)
      tmp_war_file = timestamp_filename(tmp_war_file)
      # Clean remote file before uploading
      remove_file_if_exist(upload_user, tmp_war_file)
      # Upload WAR file into temp dir
      upload! local_war_file, tmp_war_file
      # Move tmp WAR file to actual path
      clean_after_copy(tmp_war_file, tomcat_war_file, tomcat_user)
    else
      raise("Local WAR file does not existing. : #{local_war_file}")
    end
  end

  # Generate context.xml file string from ERB template file and bindings
  def get_context_template(context_template_file, tomcat_war_file)
    raise('Context template file does not existing.') if !File.exists?(context_template_file)

    tomcat_context_path = fetch(:tomcat_context_path)
    info ("#{tomcat_context_path}, #{tomcat_war_file}")

    template_file = File.read(File.expand_path(context_template_file, __FILE__))
    template = ERB.new(template_file)
    template.result(binding)
  end

  # Upload context template string to remote server
  def upload_context_file(tomcat_war_file)
    upload_user = fetch(:user)
    tomcat_context_file = fetch(:tomcat_context_file)
    tomcat_user = fetch(:tomcat_user)
    context_template = get_context_template(tomcat_context_file, tomcat_war_file)

    temp_upload_file = '/tmp/' + File.basename(tomcat_context_file)
    temp_upload_file = timestamp_filename(temp_upload_file)
    remove_file_if_exist upload_user, temp_upload_file
    contents = StringIO.new(context_template)
    upload! contents, temp_upload_file
    clean_after_copy(temp_upload_file, tomcat_context_file, tomcat_user)
  end

  # Clean-up work directory
  def cleanup_work_dir
    tomcat_work_dir = fetch(:tomcat_work_dir)
    tomcat_user = fetch(:tomcat_user)

    if dir_exist?(tomcat_work_dir)
      execute :sudo, '-u', tomcat_user, 'rm -rf', tomcat_work_dir
    else
      warn('Tomcat work directory does not exist.')
    end
  end

  # Clean-up work directory
  def cleanup_unpacked_dir(tomcat_war_file)
    tomcat_user = fetch(:tomcat_user)
    tomcat_unpacked_dir = tomcat_war_file.sub('.war', '')

    if dir_exist?(tomcat_unpacked_dir)
      execute :sudo, '-u', tomcat_user, 'rm -rf', tomcat_unpacked_dir
    else
      warn('Tomcat unpacked directory does not exist.')
    end
  end

  # Get Parallelism
  # @return :parallel or :sequence
  def get_parallelism
    if fetch(:use_parallel) == true then
      return :parallel
    else
      return :sequence
    end
  end

  # Get sudo user for tomcat command
  # @return -u and sudo user name for tomcat command. if :use_tomcat_user_cmd is false, it will return '-u root'
  def get_sudo_user_tomcat_cmd
    if fetch(:use_tomcat_user_cmd) == true then
      return "-u #{fetch(:tomcat_user)}"
    else
      return '-u root'
    end
  end

  def clean_after_copy (file, destination, sudo_user)
    execute :chmod, '666', file

    target_dir = File.dirname(destination)

    if dir_exist?(target_dir)
      execute :sudo, '-u', sudo_user, :cp, file, destination
    else
      warn("Target directory does not exist. Capitomcat will try to mkdir for target directory. : #{target_dir}")
      execute :sudo, '-u', sudo_user, :mkdir, '-p', target_dir
      execute :sudo, '-u', sudo_user, :cp, file, destination
    end

    if file_exist?(file)
      execute :rm, '-f', file
    else
      warn("The target file to remove does not exist: #{file}")
    end
  end

  # Remove file if exist
  # @param [String] user
  # @param [String] file
  def remove_file_if_exist (user, file)
    if file_exist?(file)
      execute :sudo, :chown, user, file
      execute :rm, '-f', file
    else
      warn("The target file to remove does not exist: #{file}")
    end
  end

  # Add timestamp to filename
  def timestamp_filename(file)
    dir = File.dirname(file)
    base = File.basename(file, '.*')
    time = Time.now.to_i
    ext = File.extname(file)
    File.join(dir, "#{base}-#{time}#{ext}")
  end

  # Execute the Tomcat command
  # it executes the Tomcat command in background. and sleeps for several sec after executing.
  def execute_tomcat_cmd(arg)
    puts "use_background_tomcat_cmd --> #{fetch(:use_background_tomcat_cmd)}"
    use_background = if fetch(:use_background_tomcat_cmd).to_s.length > 0
                       fetch(:use_background_tomcat_cmd).to_bool
                     else
                       true # Default is use background command which force not attaching tty(tty=UNKNOWN)
                     end
    tomcat_cmd = fetch(:tomcat_cmd)

    if use_background
      execute("echo `nohup sudo #{get_sudo_user_tomcat_cmd} #{tomcat_cmd} #{arg}& > /dev/null 2>&1` && sleep 1")
    else
      execute :sudo, get_sudo_user_tomcat_cmd, tomcat_cmd, arg
    end
  end

  def dir_exist?(dir)
    _test = capture("echo `if [ -d '#{dir}' ] ; then echo 'true' ; else echo 'false' ; fi`").to_s

    _test.eql?('true')
  end

  def file_exist?(file)
    _test = capture("echo `if [ -e '#{file}' ] ; then echo 'true' ; else echo 'false' ; fi`").to_s

    _test.eql?('true')
  end

  def wait_for_instance_state(instance_id:, state:, aws_elb_manager:)
    count = 0

    begin
      instance_state = aws_elb_manager.instance_state(instance_id)

      info "#{instance_id} state is: #{instance_state}"
      sleep(1)
      count += 1

      if count >= fetch(:elb_instance_registration_wait_seconds)
        raise "Instance: #{instance_id} not in #{instance_state} after #{count} seconds"
      end
    end until(instance_state == state)
  end

  def elb_defined?
    !fetch(:load_balancer_name, nil).nil?
  end

  def deregister_instance(instance_id, aws_elb_manager)
    aws_elb_manager.deregister_instance(instance_id)
    info 'Waiting for instance to be deregistered from Loadbalancer'
    wait_for_instance_state(
      aws_elb_manager: aws_elb_manager,
      instance_id: instance_id,
      state: 'OutOfService'
    )
  end

  def register_instance(instance_id, aws_elb_manager)
    aws_elb_manager.register_instance(instance_id)
    info 'Waiting for instance to be registered with Loadbalancer'
    wait_for_instance_state(
      aws_elb_manager: aws_elb_manager,
      instance_id: instance_id,
      state: 'InService'
    )
  end
end
